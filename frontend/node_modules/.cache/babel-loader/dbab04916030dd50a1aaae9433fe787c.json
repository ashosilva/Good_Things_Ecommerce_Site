{"ast":null,"code":"import axios from 'axios';\nimport { CREATE_ORDER_REQUEST, CREATE_ORDER_SUCCESS, CREATE_ORDER_FAIL, MY_ORDERS_REQUEST, MY_ORDERS_SUCCESS, MY_ORDERS_FAIL, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_FAIL, CLEAR_ERRORS } from '../constants/orderConstants'; // Creating Orders\n\nexport const createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CREATE_ORDER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/order/new', order, config);\n    console.log(data);\n    dispatch({\n      type: CREATE_ORDER_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: CREATE_ORDER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Get curretly logged in user orders\n\nexport const myOrders = () => async dispatch => {\n  try {\n    dispatch({\n      type: MY_ORDERS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/v1/orders/me');\n    console.log(data);\n    dispatch({\n      type: MY_ORDERS_SUCCESS,\n      payload: data.order\n    });\n  } catch (error) {\n    dispatch({\n      type: MY_ORDERS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Get order details\n\nexport const getOrderDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: ORDER_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/v1/order/${id}`);\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data.order\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Clear Errors\n\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["/Users/a.b.a/Desktop/CSC_430 SOFTWARE ENGINEERING/Good_Things_Ecommerce_Site/frontend/src/actions/orderActions.js"],"names":["axios","CREATE_ORDER_REQUEST","CREATE_ORDER_SUCCESS","CREATE_ORDER_FAIL","MY_ORDERS_REQUEST","MY_ORDERS_SUCCESS","MY_ORDERS_FAIL","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","ORDER_DETAILS_FAIL","CLEAR_ERRORS","createOrder","order","dispatch","getState","type","config","headers","data","post","console","log","payload","error","response","message","myOrders","get","getOrderDetails","id","clearErrors"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACIC,oBADJ,EAEIC,oBAFJ,EAGIC,iBAHJ,EAIIC,iBAJJ,EAKIC,iBALJ,EAMIC,cANJ,EAOIC,qBAPJ,EAQIC,qBARJ,EASIC,kBATJ,EAUIC,YAVJ,QAWO,6BAXP,C,CAaA;;AACA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAChE,MAAI;AACAD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEd;AADD,KAAD,CAAR;AAIA,UAAMe,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AADE,KAAf;AAMA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMlB,KAAK,CAACmB,IAAN,CAAW,mBAAX,EAAgCP,KAAhC,EAAuCI,MAAvC,CAAvB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEAL,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEb,oBADD;AAELoB,MAAAA,OAAO,EAAEJ;AAFJ,KAAD,CAAR;AAMH,GApBD,CAoBE,OAAOK,KAAP,EAAc;AACZV,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEZ,iBADD;AAELmB,MAAAA,OAAO,EAAEC,KAAK,CAACC,QAAN,CAAeN,IAAf,CAAoBO;AAFxB,KAAD,CAAR;AAIH;AACJ,CA3BM,C,CA6BP;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOb,QAAP,IAAoB;AAE9C,MAAI;AAEAA,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEX;AAAR,KAAD,CAAR;AAEA,UAAM;AAAEc,MAAAA;AAAF,QAAW,MAAMlB,KAAK,CAAC2B,GAAN,CAAU,mBAAV,CAAvB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEAL,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEV,iBADD;AAELiB,MAAAA,OAAO,EAAEJ,IAAI,CAACN;AAFT,KAAD,CAAR;AAKH,GAZD,CAYE,OAAOW,KAAP,EAAc;AACZV,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAET,cADD;AAELgB,MAAAA,OAAO,EAAEC,KAAK,CAACC,QAAN,CAAeN,IAAf,CAAoBO;AAFxB,KAAD,CAAR;AAIH;AACJ,CApBM,C,CAsBP;;AACA,OAAO,MAAMG,eAAe,GAAIC,EAAD,IAAQ,MAAOhB,QAAP,IAAoB;AACvD,MAAI;AAEAA,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAER;AAAR,KAAD,CAAR;AAEA,UAAM;AAAEW,MAAAA;AAAF,QAAW,MAAMlB,KAAK,CAAC2B,GAAN,CAAW,iBAAgBE,EAAG,EAA9B,CAAvB;AAEAhB,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEP,qBADD;AAELc,MAAAA,OAAO,EAAEJ,IAAI,CAACN;AAFT,KAAD,CAAR;AAKH,GAXD,CAWE,OAAOW,KAAP,EAAc;AACZV,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEN,kBADD;AAELa,MAAAA,OAAO,EAAEC,KAAK,CAACC,QAAN,CAAeN,IAAf,CAAoBO;AAFxB,KAAD,CAAR;AAIH;AACJ,CAlBM,C,CAoBP;;AACA,OAAO,MAAMK,WAAW,GAAG,MAAM,MAAOjB,QAAP,IAAoB;AACjDA,EAAAA,QAAQ,CAAC;AACLE,IAAAA,IAAI,EAAEL;AADD,GAAD,CAAR;AAGH,CAJM","sourcesContent":["import axios from 'axios'\n\nimport {\n    CREATE_ORDER_REQUEST,\n    CREATE_ORDER_SUCCESS,\n    CREATE_ORDER_FAIL,\n    MY_ORDERS_REQUEST,\n    MY_ORDERS_SUCCESS,\n    MY_ORDERS_FAIL,\n    ORDER_DETAILS_REQUEST,\n    ORDER_DETAILS_SUCCESS,\n    ORDER_DETAILS_FAIL,\n    CLEAR_ERRORS\n} from '../constants/orderConstants'\n\n// Creating Orders\nexport const createOrder = (order) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: CREATE_ORDER_REQUEST\n        })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.post('/api/v1/order/new', order, config)\n        console.log(data)\n\n        dispatch({\n            type: CREATE_ORDER_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: CREATE_ORDER_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Get curretly logged in user orders\nexport const myOrders = () => async (dispatch) => {\n\n    try {\n\n        dispatch({ type: MY_ORDERS_REQUEST });\n\n        const { data } = await axios.get('/api/v1/orders/me')\n        console.log(data)\n\n        dispatch({\n            type: MY_ORDERS_SUCCESS,\n            payload: data.order\n        })\n\n    } catch (error) {\n        dispatch({\n            type: MY_ORDERS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Get order details\nexport const getOrderDetails = (id) => async (dispatch) => {\n    try {\n\n        dispatch({ type: ORDER_DETAILS_REQUEST });\n\n        const { data } = await axios.get(`/api/v1/order/${id}`)\n\n        dispatch({\n            type: ORDER_DETAILS_SUCCESS,\n            payload: data.order\n        })\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_DETAILS_FAIL,\n            payload: error.response.data.message\n        })\n    }\n}\n\n// Clear Errors\nexport const clearErrors = () => async (dispatch) => {\n    dispatch({\n        type: CLEAR_ERRORS\n    })\n}"]},"metadata":{},"sourceType":"module"}